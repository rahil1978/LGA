using AutoMapper;
using Lga.Id.Core.Entities.ScoreAggregate;
using Lga.Id.Core.Interfaces.Services;
using Lga.Id.Web.Mappings;
using Lga.Id.Web.ResourceModels;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Lga.Id.Web.Controllers
{

    [ApiVersion("1.0")]  
    [Route("api/v1/[controller]")]
    [ApiController]
    public class ScoresController : BaseApiController
    {
        private readonly IMapper _mapper;        
        private readonly IScoreService _scoreService;

        public ScoresController(IMapper mapper, IScoreService scoreService)
        {
            _mapper = mapper;
            _scoreService = scoreService;
        }

        /// <summary>
        /// Gets all scores.
        /// </summary>
        /// <returns>List os scores.</returns>
        [HttpGet]
        [ProducesResponseType(typeof(IEnumerable<ScoreResourceModel>), 200)]
        public async Task<IEnumerable<ScoreResourceModel>> ListAsync()
        {
            var scores = await _scoreService.GetAllScores();
            //TODO: Having some issue here for mapping. 
            //var resources = _mapper.Map<IEnumerable<Score>, IEnumerable<ScoreResourceModel>>(scores); 
            var resources = new List<ScoreResourceModel>();
            CustomMappingHelper.MapScores(scores, resources);
            return resources;
        }
             

        /// <summary>
        /// Gets the score that matches the specified ID.
        /// </summary>
        /// <param name="id">scores identifier.</param>        
        /// <returns>Response for the request.</returns>
        [HttpGet("{id:int}", Name = "GetAsync")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GetAsync(int id)
        {
            var result = await _scoreService.GetScoreResponseById(id);

            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }

            var productResource = _mapper.Map<Score, ScoreResourceModel>(result.Data);
            return Ok(productResource);
        }


        /// <summary>
        /// Creates a new score record.
        /// </summary>
        /// <param name="newScore">New score data.</param>
        /// <returns>Response for the request.</returns>
        [HttpPost]
        [ProducesResponseType(typeof(ScoreResourceModel), 201)]
        [ProducesResponseType(typeof(ErrorResourceModel), 400)]
        public async Task<IActionResult> PostAsync([FromBody] SaveScoreResourceModel newScore)
        {
            var score = _mapper.Map<SaveScoreResourceModel, Score>(newScore);
            score.Id = new int(); // Autogenerated in EF or a funtion to generate this
            //score.CreatedOn = System.DateTime.Now;
            //score.CreatedBy = "Raheel"; //harded coded as Auth is yet to config
            var result = await _scoreService.AddScore(score);

            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }

            var productResource = _mapper.Map<Score, SaveScoreResourceModel>(result.Data);
            return Ok(productResource);
        }


        /// <summary>
        /// Updates a score.
        /// </summary>
        /// <param name="id">score id.</param>
        /// <param name="updatedScore">Updated score data.</param>
        /// <returns>Response for the request.</returns>
        [HttpPut("{id}")]
        [ProducesResponseType(typeof(ScoreResourceModel), 200)]
        [ProducesResponseType(typeof(ErrorResourceModel), 400)]
        public async Task<IActionResult> PutAsync(int id, [FromBody] SaveScoreResourceModel updatedScore)
        {
            var score = _mapper.Map<SaveScoreResourceModel, Score>(updatedScore);
            var result = await _scoreService.UpdateScore(id, score);

            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }
            var productResourceModel = _mapper.Map<Score, ScoreResourceModel>(result.Data);
            return Ok(productResourceModel);
        }


        /// <summary>
        /// Deletes a score and its options.
        /// </summary>
        /// <param name="id">Score identifier.</param>
        /// <returns>Response for the request.</returns>
        [HttpDelete("{id}")]
        [ProducesResponseType(typeof(ScoreResourceModel), 200)]
        [ProducesResponseType(typeof(ErrorResourceModel), 400)]
        public async Task<IActionResult> DeleteAsync(int id)
        {
            var result = await _scoreService.DeleteScore(id);

            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }
            var productResource = _mapper.Map<Score, ScoreResourceModel>(result.Data);
            return Ok(productResource);
        }

        /// <summary>
        /// Finds all options for a specified score.
        /// </summary>
        /// <param name="scoreId"></param>
        /// <returns></returns>
        [HttpGet("{id}/details")]      
        public async Task<IEnumerable<ScoreDetailResourceModel>> GetScoreDetail(int scoreId)
        {
            var productOptions = await _scoreService.GetAllScoreDetailsByScoreId(scoreId);
            var resources = new List<ScoreDetailResourceModel>();
            CustomMappingHelper.MapScoreDetails(productOptions, resources);
            return resources;
        }

        /// <summary>
        /// Finds the specified score option for the specified score.
        /// </summary>
        /// <param name="scoreId"></param>
        /// <param name="scoreDetailId"></param>
        /// <returns></returns>
        [HttpGet("{id}/details/{detailId}")]       
        public async Task<IActionResult> GetOptionAsync(int scoreId,int scoreDetailId)
        {
            var result = await _scoreService.GetScoreDetailByScoreDetailId(scoreId, scoreDetailId);
            
            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }

            var productOptionResource = _mapper.Map<ScoreDetail, ScoreDetailResourceModel>(result.Data);
            return Ok(productOptionResource);
        }


        /// <summary>
        /// Adds a new score detail to the specified score.
        /// </summary>
        /// <param name="scoreId"></param>
        /// <param name="newScoreDetail"></param>
        /// <returns></returns>
        [HttpPost("{id}/details")]        
        [ProducesResponseType(typeof(ScoreResourceModel), 201)]
        [ProducesResponseType(typeof(ErrorResourceModel), 400)]
        public async Task<IActionResult> PostScoreDetailsAsync(int scoreId, [FromBody] SaveScoreDetailResourceModel newScoreDetail)
        {
            var productOption = _mapper.Map<SaveScoreDetailResourceModel, ScoreDetail>(newScoreDetail);
            productOption.Id = new int(); // Auto generated identity column
            productOption.CreatedOn = System.DateTime.Now;
            productOption.CreatedBy = "Raheel"; //harded coded as Auth is yet to config
            var result = await _scoreService.AddScoreDetailByScoreId(scoreId, productOption);

            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }

            var productOptionResource = _mapper.Map<ScoreDetail, ScoreDetailResourceModel>(result.Data);
            return Ok(productOptionResource);
        }


        /// <summary>
        /// Updates the specified score details.
        /// </summary>
        /// <param name="scoreId"></param>
        /// <param name="scoreDetailId"></param>
        /// <param name="updatedScoreDetail"></param>
        /// <returns></returns>
        [HttpPut("{id}/options/{optionId}")]      
        [ProducesResponseType(typeof(ScoreResourceModel), 200)]
        [ProducesResponseType(typeof(ErrorResourceModel), 400)]
        public async Task<IActionResult> PutOptionAsync(int scoreId, int scoreDetailId, [FromBody] SaveScoreDetailResourceModel updatedScoreDetail)
        {
            var scoreDetail = _mapper.Map<SaveScoreDetailResourceModel, ScoreDetail>(updatedScoreDetail);
            scoreDetail.Score.Id = scoreId;
            scoreDetail.Id = scoreDetailId;
            //productOption.IsDeleted = false;
            scoreDetail.UpdatedOn = System.DateTime.Now;
            scoreDetail.UpdatedBy = "Raheel"; //harded coded as Auth is yet to config
            var result = await _scoreService.UpdateScoreDetailByScoreId(scoreId, scoreDetail);

            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }

            var productOptionResource = _mapper.Map<ScoreDetail, ScoreDetailResourceModel>(result.Data);
            return Ok(productOptionResource);
        }


        /// <summary>
        /// Deletes the specified Score Detail\.
        /// </summary>
        /// <param name="scoreId"></param>
        /// <param name="scoreDetailId"></param>
        /// <returns></returns>
        [HttpDelete("{id}/options/{optionId}")]
        [ProducesResponseType(typeof(ScoreResourceModel), 200)]
        [ProducesResponseType(typeof(ErrorResourceModel), 400)]
        public async Task<IActionResult> DeleteOptionAsync(int scoreId, int scoreDetailId)
        {
            var result = await _scoreService.DeleteScoreDetail(scoreId, scoreDetailId);

            if (!result.IsSuccess)
            {
                return BadRequest(new ErrorResourceModel(result.Message));
            }
            var productResource = _mapper.Map<ScoreDetail, ScoreDetailResourceModel>(result.Data);
            return Ok(productResource);
        }


    }
}
